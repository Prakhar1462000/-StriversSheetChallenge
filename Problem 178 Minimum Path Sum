#include <bits/stdc++.h> 
int solve(vector<vector<int>> &grid, int i, int j, int n, int m, vector<vector<int>> &dp) {

    if(i > n-1 || j > m-1){

        return 1e9;

    }

    if(i == n-1 && j == m-1){

        return grid[i][j];

    }

    if(dp[i][j] != -1){

        return dp[i][j];

    }

 

    int downAns = grid[i][j] + solve(grid,i+1,j,n,m,dp);

    int rightAns = grid[i][j] + solve(grid,i,j+1,n,m,dp);

 

    return dp[i][j] = min(downAns, rightAns);

} 
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n = grid.size();

    int m = grid[0].size();

 

    vector<vector<int>> dp(n, vector<int>(m, -1));

    int i=0,j=0;

    int ans = solve(grid,i,j,n,m,dp);

    return ans;
}
