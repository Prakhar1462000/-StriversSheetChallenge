#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void leftsubtree(TreeNode<int>* root,vector<int> &ans)
{
    if(root == NULL)
    {
        return;
    }
    if(root->left || root->right){

        ans.push_back(root->data);

    }
      leftsubtree(root->left, ans);
    if(!root->left) {
      leftsubtree(root->right, ans);
    }
}
void leafsubtree(TreeNode<int>* root,vector<int> &ans)
{
    if(root == NULL)
    {
        return;
    }
    if(root->left == NULL && root->right == NULL)
    {
        ans.push_back(root->data);
    }
    leafsubtree(root->left,ans);
    leafsubtree(root->right,ans);
}
void rightsubtree(TreeNode<int>* root,vector<int> &ans)
{
    if(root == NULL)
    {
        return;
    }
        if(root->left || root->right){

        ans.push_back(root->data);

    }
      rightsubtree(root->right, ans);
      if(!root->right) {
      rightsubtree(root->left, ans);
    }
}
vector<int> traverseBoundary(TreeNode<int>* root)
{
    // Write your code here.
    vector<int> ans1;

    vector<int> ans2;

    vector<int> ans3;

    leftsubtree(root->left,ans1);
    leafsubtree(root,ans3);
    rightsubtree(root->right,ans2);
    
    vector<int> ans;

    if (root->left || root->right) {

        ans.push_back(root->data);

    }

    for(int i=0;i<ans1.size();i++){

        ans.push_back(ans1[i]);

    }

    for(int i=0;i<ans3.size();i++){

        ans.push_back(ans3[i]);

    }

    for(int i=ans2.size()-1;i>=0;i--){

        ans.push_back(ans2[i]);

    }

    return ans;


}
