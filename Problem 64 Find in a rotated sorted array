int findpivot(int* arr,int n)
{
    int start=0;
    int end=n;
    int mid=start+(end-start)/2;
    while(start <= end)
    {
        if(start == end)
        {
            return start;
        }
        if(mid+1 >= end && arr[mid] > arr[mid+1])
        {
            return mid;
        }
        else if(mid-1 >= start && arr[mid] < arr[mid-1])
        {
            return mid-1;
        }
        else if(arr[start] > arr[mid])
        {
            end=mid-1;
        }
        else{
            start=mid+1;
        }
        mid=start+(end-start)/2;
    }
    return -1;
}
int binarySearch(vector<int> arr, int s, int e, int target) {
    int mid = s + (e-s)/2;

    while(s <= e) {
        if(arr[mid] == target) {
            return mid;
        }
        if(arr[mid] > target)
            e = mid - 1;
        else
            s = mid + 1;
        mid = s +(e-s)/2;
    }
    return -1;


}
int search(int* nums, int n, int target) 
{
    // Write your code here.
    int pivot=findpivot(nums,n);
    int ans = 0;
        if(target >= nums[0] && target <= nums[pivot]) {
            ans = binarySearch(nums, 0, pivot, target);

        }
        else {
            ans = binarySearch(nums, pivot+1, nums.size()-1, target);
        }

    return ans;

}
