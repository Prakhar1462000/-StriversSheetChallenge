#include<stack>

void dfs(int node, stack<int> &stk, vector<vector<int>> &adjList, vector<bool> &visited){
    visited[node]=true;
    
    for(auto neighbour:adjList[node])
        if(!visited[neighbour])
            dfs(neighbour, stk, adjList, visited);
            
    stk.push(node);
}

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    vector<vector<int>> adjList(v);
    vector<bool> visited(v);
    stack<int> stk;
    vector<int> ans;
    
    for(int i=0; i<e; i++)
        adjList[edges[i][0]].push_back(edges[i][1]);
    
    for(int i=0; i<v; i++)
        if(!visited[i])
            dfs(i, stk, adjList, visited);
    
    while(!stk.empty()){
        ans.push_back(stk.top());
        stk.pop();
    }
    return ans;
}
